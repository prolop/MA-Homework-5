{"version":3,"sources":["Cell.js","Row.js","Board.js","App.js","serviceWorker.js","index.js"],"names":["Cell","props","this","data","open","mines","className","onClick","xmlns","viewBox","d","count","renderCell","Component","Row","cells","map","index","key","Board","state","rows","createBoard","isLose","isWin","openedCell","board","i","push","j","cols","x","y","row","Math","floor","random","col","cell","minesCount","findMines","currentCell","setState","length","newRows","openCell","bind","type","resetBoard","hidden","App","React","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d4c6fe6f.chunk.js","sourcesContent":["import React, {Component} from 'react';\n\nclass Cell extends Component {\n    constructor(props) {\n        super(props);\n    }\n\n    renderCell() {\n        if (this.props.data.open) {\n            if (this.props.data.mines) {\n                return (\n                    <div className=\"minesweeper__cell minesweeper__cell--open minesweeper__cell--mine\" onClick={() => this.props.open(this.props.data)}>\n                        <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 489.203 489.203\"><path d=\"M365.001 20.303l-17.2 16.2c-2.3 2.2-2.4 5.9-.2 8.2 2.2 2.3 5.9 2.4 8.2.2l17.2-16.2c2.3-2.2 2.4-5.9.2-8.2-2.2-2.3-5.9-2.4-8.2-.2zM321.501 5.603l-.7 23.6c-.1 3.2 2.4 5.9 5.6 6s5.9-2.4 6-5.6l.7-23.6c.1-3.2-2.4-5.9-5.6-6-3.2-.1-5.9 2.4-6 5.6zM197.301 169.903v20.2c-61.5 19.9-106 77.7-106 145.8 0 84.7 68.6 153.3 153.3 153.3s153.3-68.6 153.3-153.3c0-68.4-44.8-126.4-106.7-146.1v-19.9c0-10.7-8.7-19.4-19.4-19.4h-55.1c-10.7 0-19.4 8.7-19.4 19.4zm5 84.9c-30.1 15.8-48.8 46.7-48.8 80.7 0 7.9-6.4 14.4-14.4 14.4-7.9 0-14.4-6.4-14.4-14.4 0-44.7 24.6-85.4 64.2-106.2 7-3.7 15.7-1 19.4 6 3.8 7.2 1 15.8-6 19.5zM304.701 43.403c2.3-2.2 2.4-5.9.2-8.2l-16.2-17.2c-2.2-2.3-5.9-2.4-8.2-.2-2.3 2.2-2.4 5.9-.2 8.2l16.2 17.2c2.2 2.2 5.9 2.4 8.2.2zM346.101 95.703l16.2 17.2c2.2 2.3 5.9 2.4 8.2.2 2.3-2.2 2.4-5.9.2-8.2l-16.2-17.2c-2.2-2.3-5.9-2.4-8.2-.2-2.3 2.2-2.4 5.9-.2 8.2zM355.901 66.303c-.1 3.2 2.4 5.9 5.6 6l23.6.7c3.2.1 5.9-2.4 6-5.6s-2.4-5.9-5.6-6l-23.6-.7c-3.3-.1-6 2.4-6 5.6zM236.501 136.103h19.7c7.7-31.9 34.8-56.3 68-60 4.9-.5 8.8-4.6 8.8-9.5 0-5.8-5.1-10.2-10.8-9.5-43 4.7-77.7 37.2-85.7 79zM318.701 101.403l-.7 23.6c-.1 3.2 2.4 5.9 5.6 6s5.9-2.4 6-5.6l.7-23.6c.1-3.2-2.4-5.9-5.6-6-3.3-.1-5.9 2.4-6 5.6z\"/></svg>\n                    </div>\n                );\n            } else if (this.props.data.count > 0) {\n                return (\n                    <div className=\"minesweeper__cell minesweeper__cell--open\" onClick={() => this.props.open(this.props.data)}>\n                        {this.props.data.count}\n                    </div>\n                );\n            } else {\n                return (\n                    <div className=\"minesweeper__cell minesweeper__cell--open\" onClick={() => this.props.open(this.props.data)} />\n                );\n            }\n        } else {\n            return (\n                <div className=\"minesweeper__cell\" onClick={() => this.props.open(this.props.data)} />\n            );\n        }\n    }\n\n    render() {\n        return this.renderCell();\n    }\n}\n\nexport default Cell;\n","import React, {Component} from 'react';\nimport Cell from \"./Cell\";\n\nclass Row extends Component {\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        let cells = this.props.cells.map((data, index) => {\n            return <Cell data={data} key={index} open={this.props.open}/>\n        });\n        return (\n            <div className=\"minesweeper__row\">\n                {cells}\n            </div>\n        );\n    }\n}\n\nexport default Row;\n","import React, {Component} from 'react';\nimport Row from \"./Row\";\n\nclass Board extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            rows: this.createBoard(props),\n            isLose: false,\n            isWin: false\n        };\n        this.openedCell = 0;\n    }\n\n    createBoard(props) {\n        let board = [];\n\n        for (let i = 0; i < props.rows; i++) {\n            board.push([]);\n\n            for (let j = 0; j < props.cols; j++) {\n                board[i].push({\n                    x: j,\n                    y: i,\n                    count: 0,\n                    open: false,\n                    mines: false,\n                });\n            }\n        }\n\n        for (let i = 0; i < props.mines; i++) {\n            const row = Math.floor(Math.random() * props.rows);\n            const col = Math.floor(Math.random() * props.cols);\n\n            const cell = board[row][col];\n            if (cell.mines) {\n                i--;\n            } else {\n                cell.mines = true;\n            }\n        }\n        return board;\n    }\n\n    openCell(cell) {\n        if (this.state.isLose || this.state.isWin) {\n            return;\n        }\n        const rows = this.state.rows;\n\n        let minesCount = this.findMines(cell);\n\n        const currentCell = rows[cell.y][cell.x];\n\n        if(!currentCell.open) {\n            if (currentCell.mines) {\n                currentCell.open = true;\n                this.openedCell = 0;\n                this.setState({\n                    isLose: true,\n                });\n            } else {\n                currentCell.open = true;\n                currentCell.count = minesCount;\n\n                this.openedCell++;\n\n                if (this.openedCell === (this.props.rows * this.props.cols - this.props.mines)) {\n                    this.openedCell = 0;\n                    this.setState({\n                        isWin: true,\n                    });\n                }\n\n                this.setState(rows);\n            }\n        }\n    };\n\n    findMines(cell) {\n        let minesCount = 0;\n\n        for (let i = -1; i <= 1; i++) {\n            for (let j = -1; j <= 1; j++) {\n                if(cell.y + i >= 0 && cell.x + j >= 0) {\n                    if (cell.y + i < this.state.rows.length && cell.x + j < this.state.rows[0].length) {\n                        if (this.state.rows[cell.y + i][cell.x + j].mines && !(i === 0 && j === 0)) {\n                            minesCount++;\n                        }\n                    }\n                }\n            }\n        }\n\n        return minesCount;\n    }\n\n    resetBoard() {\n        let newRows = this.createBoard(this.props);\n        this.setState({\n            rows: newRows,\n            isLose: false,\n            isWin: false,\n        });\n    }\n\n    render() {\n        const rows = this.state.rows.map((row, index) => {\n            return (\n                <Row cells={row} key={index} open={this.openCell.bind(this)}/>\n            );\n        });\n        return (\n            <div className=\"minesweeper\">\n                <h2>Minesweeper</h2>\n                <button type=\"button\" className=\"minesweeper__reset\" onClick={this.resetBoard.bind(this)}>Reset</button>\n                <p className=\"minesweeper__lose\" hidden={!this.state.isLose}>You lose</p>\n                <p className=\"minesweeper__win\" hidden={!this.state.isWin}>You win</p>\n                <div className=\"minesweeper__board\">{rows}</div>\n            </div>\n        );\n    }\n}\n\nexport default Board;\n","import React from 'react';\nimport Board from \"./Board\";\n\nclass App extends React.Component {\n  state = {\n    rows: 10,\n    cols: 10,\n    mines: 10\n  };\n\n\n  render() {\n    return (\n        <Board\n            rows={this.state.rows}\n            cols={this.state.cols}\n            mines={this.state.mines}\n        />\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}